#ifndef _ERRCODE_H_
#define _ERRCODE_H_

#include <errno.h>

namespace more {

    // This header has been automatically generated by errocode.sh.
    //

    template <int E> struct errcode { static const char * value; };
    template <int E> const char *errcode<E>::value = "UNKNOWN";

    template <> struct errcode<EPERM> { static const char * value; };
    const char *errcode<EPERM>::value = "EPERM";
    template <> struct errcode<ENOENT> { static const char * value; };
    const char *errcode<ENOENT>::value = "ENOENT";
    template <> struct errcode<ESRCH> { static const char * value; };
    const char *errcode<ESRCH>::value = "ESRCH";
    template <> struct errcode<EINTR> { static const char * value; };
    const char *errcode<EINTR>::value = "EINTR";
    template <> struct errcode<EIO> { static const char * value; };
    const char *errcode<EIO>::value = "EIO";
    template <> struct errcode<ENXIO> { static const char * value; };
    const char *errcode<ENXIO>::value = "ENXIO";
    template <> struct errcode<E2BIG> { static const char * value; };
    const char *errcode<E2BIG>::value = "E2BIG";
    template <> struct errcode<ENOEXEC> { static const char * value; };
    const char *errcode<ENOEXEC>::value = "ENOEXEC";
    template <> struct errcode<EBADF> { static const char * value; };
    const char *errcode<EBADF>::value = "EBADF";
    template <> struct errcode<ECHILD> { static const char * value; };
    const char *errcode<ECHILD>::value = "ECHILD";
    template <> struct errcode<EAGAIN> { static const char * value; };
    const char *errcode<EAGAIN>::value = "EAGAIN";
    template <> struct errcode<ENOMEM> { static const char * value; };
    const char *errcode<ENOMEM>::value = "ENOMEM";
    template <> struct errcode<EACCES> { static const char * value; };
    const char *errcode<EACCES>::value = "EACCES";
    template <> struct errcode<EFAULT> { static const char * value; };
    const char *errcode<EFAULT>::value = "EFAULT";
    template <> struct errcode<ENOTBLK> { static const char * value; };
    const char *errcode<ENOTBLK>::value = "ENOTBLK";
    template <> struct errcode<EBUSY> { static const char * value; };
    const char *errcode<EBUSY>::value = "EBUSY";
    template <> struct errcode<EEXIST> { static const char * value; };
    const char *errcode<EEXIST>::value = "EEXIST";
    template <> struct errcode<EXDEV> { static const char * value; };
    const char *errcode<EXDEV>::value = "EXDEV";
    template <> struct errcode<ENODEV> { static const char * value; };
    const char *errcode<ENODEV>::value = "ENODEV";
    template <> struct errcode<ENOTDIR> { static const char * value; };
    const char *errcode<ENOTDIR>::value = "ENOTDIR";
    template <> struct errcode<EISDIR> { static const char * value; };
    const char *errcode<EISDIR>::value = "EISDIR";
    template <> struct errcode<EINVAL> { static const char * value; };
    const char *errcode<EINVAL>::value = "EINVAL";
    template <> struct errcode<ENFILE> { static const char * value; };
    const char *errcode<ENFILE>::value = "ENFILE";
    template <> struct errcode<EMFILE> { static const char * value; };
    const char *errcode<EMFILE>::value = "EMFILE";
    template <> struct errcode<ENOTTY> { static const char * value; };
    const char *errcode<ENOTTY>::value = "ENOTTY";
    template <> struct errcode<ETXTBSY> { static const char * value; };
    const char *errcode<ETXTBSY>::value = "ETXTBSY";
    template <> struct errcode<EFBIG> { static const char * value; };
    const char *errcode<EFBIG>::value = "EFBIG";
    template <> struct errcode<ENOSPC> { static const char * value; };
    const char *errcode<ENOSPC>::value = "ENOSPC";
    template <> struct errcode<ESPIPE> { static const char * value; };
    const char *errcode<ESPIPE>::value = "ESPIPE";
    template <> struct errcode<EROFS> { static const char * value; };
    const char *errcode<EROFS>::value = "EROFS";
    template <> struct errcode<EMLINK> { static const char * value; };
    const char *errcode<EMLINK>::value = "EMLINK";
    template <> struct errcode<EPIPE> { static const char * value; };
    const char *errcode<EPIPE>::value = "EPIPE";
    template <> struct errcode<EDOM> { static const char * value; };
    const char *errcode<EDOM>::value = "EDOM";
    template <> struct errcode<ERANGE> { static const char * value; };
    const char *errcode<ERANGE>::value = "ERANGE";
    template <> struct errcode<EDEADLK> { static const char * value; };
    const char *errcode<EDEADLK>::value = "EDEADLK";
    template <> struct errcode<ENAMETOOLONG> { static const char * value; };
    const char *errcode<ENAMETOOLONG>::value = "ENAMETOOLONG";
    template <> struct errcode<ENOLCK> { static const char * value; };
    const char *errcode<ENOLCK>::value = "ENOLCK";
    template <> struct errcode<ENOSYS> { static const char * value; };
    const char *errcode<ENOSYS>::value = "ENOSYS";
    template <> struct errcode<ENOTEMPTY> { static const char * value; };
    const char *errcode<ENOTEMPTY>::value = "ENOTEMPTY";
    template <> struct errcode<ELOOP> { static const char * value; };
    const char *errcode<ELOOP>::value = "ELOOP";
    template <> struct errcode<ENOMSG> { static const char * value; };
    const char *errcode<ENOMSG>::value = "ENOMSG";
    template <> struct errcode<EIDRM> { static const char * value; };
    const char *errcode<EIDRM>::value = "EIDRM";
    template <> struct errcode<ECHRNG> { static const char * value; };
    const char *errcode<ECHRNG>::value = "ECHRNG";
    template <> struct errcode<EL2NSYNC> { static const char * value; };
    const char *errcode<EL2NSYNC>::value = "EL2NSYNC";
    template <> struct errcode<EL3HLT> { static const char * value; };
    const char *errcode<EL3HLT>::value = "EL3HLT";
    template <> struct errcode<EL3RST> { static const char * value; };
    const char *errcode<EL3RST>::value = "EL3RST";
    template <> struct errcode<ELNRNG> { static const char * value; };
    const char *errcode<ELNRNG>::value = "ELNRNG";
    template <> struct errcode<EUNATCH> { static const char * value; };
    const char *errcode<EUNATCH>::value = "EUNATCH";
    template <> struct errcode<ENOCSI> { static const char * value; };
    const char *errcode<ENOCSI>::value = "ENOCSI";
    template <> struct errcode<EL2HLT> { static const char * value; };
    const char *errcode<EL2HLT>::value = "EL2HLT";
    template <> struct errcode<EBADE> { static const char * value; };
    const char *errcode<EBADE>::value = "EBADE";
    template <> struct errcode<EBADR> { static const char * value; };
    const char *errcode<EBADR>::value = "EBADR";
    template <> struct errcode<EXFULL> { static const char * value; };
    const char *errcode<EXFULL>::value = "EXFULL";
    template <> struct errcode<ENOANO> { static const char * value; };
    const char *errcode<ENOANO>::value = "ENOANO";
    template <> struct errcode<EBADRQC> { static const char * value; };
    const char *errcode<EBADRQC>::value = "EBADRQC";
    template <> struct errcode<EBADSLT> { static const char * value; };
    const char *errcode<EBADSLT>::value = "EBADSLT";
    template <> struct errcode<EBFONT> { static const char * value; };
    const char *errcode<EBFONT>::value = "EBFONT";
    template <> struct errcode<ENOSTR> { static const char * value; };
    const char *errcode<ENOSTR>::value = "ENOSTR";
    template <> struct errcode<ENODATA> { static const char * value; };
    const char *errcode<ENODATA>::value = "ENODATA";
    template <> struct errcode<ETIME> { static const char * value; };
    const char *errcode<ETIME>::value = "ETIME";
    template <> struct errcode<ENOSR> { static const char * value; };
    const char *errcode<ENOSR>::value = "ENOSR";
    template <> struct errcode<ENONET> { static const char * value; };
    const char *errcode<ENONET>::value = "ENONET";
    template <> struct errcode<ENOPKG> { static const char * value; };
    const char *errcode<ENOPKG>::value = "ENOPKG";
    template <> struct errcode<EREMOTE> { static const char * value; };
    const char *errcode<EREMOTE>::value = "EREMOTE";
    template <> struct errcode<ENOLINK> { static const char * value; };
    const char *errcode<ENOLINK>::value = "ENOLINK";
    template <> struct errcode<EADV> { static const char * value; };
    const char *errcode<EADV>::value = "EADV";
    template <> struct errcode<ESRMNT> { static const char * value; };
    const char *errcode<ESRMNT>::value = "ESRMNT";
    template <> struct errcode<ECOMM> { static const char * value; };
    const char *errcode<ECOMM>::value = "ECOMM";
    template <> struct errcode<EPROTO> { static const char * value; };
    const char *errcode<EPROTO>::value = "EPROTO";
    template <> struct errcode<EMULTIHOP> { static const char * value; };
    const char *errcode<EMULTIHOP>::value = "EMULTIHOP";
    template <> struct errcode<EDOTDOT> { static const char * value; };
    const char *errcode<EDOTDOT>::value = "EDOTDOT";
    template <> struct errcode<EBADMSG> { static const char * value; };
    const char *errcode<EBADMSG>::value = "EBADMSG";
    template <> struct errcode<EOVERFLOW> { static const char * value; };
    const char *errcode<EOVERFLOW>::value = "EOVERFLOW";
    template <> struct errcode<ENOTUNIQ> { static const char * value; };
    const char *errcode<ENOTUNIQ>::value = "ENOTUNIQ";
    template <> struct errcode<EBADFD> { static const char * value; };
    const char *errcode<EBADFD>::value = "EBADFD";
    template <> struct errcode<EREMCHG> { static const char * value; };
    const char *errcode<EREMCHG>::value = "EREMCHG";
    template <> struct errcode<ELIBACC> { static const char * value; };
    const char *errcode<ELIBACC>::value = "ELIBACC";
    template <> struct errcode<ELIBBAD> { static const char * value; };
    const char *errcode<ELIBBAD>::value = "ELIBBAD";
    template <> struct errcode<ELIBSCN> { static const char * value; };
    const char *errcode<ELIBSCN>::value = "ELIBSCN";
    template <> struct errcode<ELIBMAX> { static const char * value; };
    const char *errcode<ELIBMAX>::value = "ELIBMAX";
    template <> struct errcode<ELIBEXEC> { static const char * value; };
    const char *errcode<ELIBEXEC>::value = "ELIBEXEC";
    template <> struct errcode<EILSEQ> { static const char * value; };
    const char *errcode<EILSEQ>::value = "EILSEQ";
    template <> struct errcode<ERESTART> { static const char * value; };
    const char *errcode<ERESTART>::value = "ERESTART";
    template <> struct errcode<ESTRPIPE> { static const char * value; };
    const char *errcode<ESTRPIPE>::value = "ESTRPIPE";
    template <> struct errcode<EUSERS> { static const char * value; };
    const char *errcode<EUSERS>::value = "EUSERS";
    template <> struct errcode<ENOTSOCK> { static const char * value; };
    const char *errcode<ENOTSOCK>::value = "ENOTSOCK";
    template <> struct errcode<EDESTADDRREQ> { static const char * value; };
    const char *errcode<EDESTADDRREQ>::value = "EDESTADDRREQ";
    template <> struct errcode<EMSGSIZE> { static const char * value; };
    const char *errcode<EMSGSIZE>::value = "EMSGSIZE";
    template <> struct errcode<EPROTOTYPE> { static const char * value; };
    const char *errcode<EPROTOTYPE>::value = "EPROTOTYPE";
    template <> struct errcode<ENOPROTOOPT> { static const char * value; };
    const char *errcode<ENOPROTOOPT>::value = "ENOPROTOOPT";
    template <> struct errcode<EPROTONOSUPPORT> { static const char * value; };
    const char *errcode<EPROTONOSUPPORT>::value = "EPROTONOSUPPORT";
    template <> struct errcode<ESOCKTNOSUPPORT> { static const char * value; };
    const char *errcode<ESOCKTNOSUPPORT>::value = "ESOCKTNOSUPPORT";
    template <> struct errcode<EOPNOTSUPP> { static const char * value; };
    const char *errcode<EOPNOTSUPP>::value = "EOPNOTSUPP";
    template <> struct errcode<EPFNOSUPPORT> { static const char * value; };
    const char *errcode<EPFNOSUPPORT>::value = "EPFNOSUPPORT";
    template <> struct errcode<EAFNOSUPPORT> { static const char * value; };
    const char *errcode<EAFNOSUPPORT>::value = "EAFNOSUPPORT";
    template <> struct errcode<EADDRINUSE> { static const char * value; };
    const char *errcode<EADDRINUSE>::value = "EADDRINUSE";
    template <> struct errcode<EADDRNOTAVAIL> { static const char * value; };
    const char *errcode<EADDRNOTAVAIL>::value = "EADDRNOTAVAIL";
    template <> struct errcode<ENETDOWN> { static const char * value; };
    const char *errcode<ENETDOWN>::value = "ENETDOWN";
    template <> struct errcode<ENETUNREACH> { static const char * value; };
    const char *errcode<ENETUNREACH>::value = "ENETUNREACH";
    template <> struct errcode<ENETRESET> { static const char * value; };
    const char *errcode<ENETRESET>::value = "ENETRESET";
    template <> struct errcode<ECONNABORTED> { static const char * value; };
    const char *errcode<ECONNABORTED>::value = "ECONNABORTED";
    template <> struct errcode<ECONNRESET> { static const char * value; };
    const char *errcode<ECONNRESET>::value = "ECONNRESET";
    template <> struct errcode<ENOBUFS> { static const char * value; };
    const char *errcode<ENOBUFS>::value = "ENOBUFS";
    template <> struct errcode<EISCONN> { static const char * value; };
    const char *errcode<EISCONN>::value = "EISCONN";
    template <> struct errcode<ENOTCONN> { static const char * value; };
    const char *errcode<ENOTCONN>::value = "ENOTCONN";
    template <> struct errcode<ESHUTDOWN> { static const char * value; };
    const char *errcode<ESHUTDOWN>::value = "ESHUTDOWN";
    template <> struct errcode<ETOOMANYREFS> { static const char * value; };
    const char *errcode<ETOOMANYREFS>::value = "ETOOMANYREFS";
    template <> struct errcode<ETIMEDOUT> { static const char * value; };
    const char *errcode<ETIMEDOUT>::value = "ETIMEDOUT";
    template <> struct errcode<ECONNREFUSED> { static const char * value; };
    const char *errcode<ECONNREFUSED>::value = "ECONNREFUSED";
    template <> struct errcode<EHOSTDOWN> { static const char * value; };
    const char *errcode<EHOSTDOWN>::value = "EHOSTDOWN";
    template <> struct errcode<EHOSTUNREACH> { static const char * value; };
    const char *errcode<EHOSTUNREACH>::value = "EHOSTUNREACH";
    template <> struct errcode<EALREADY> { static const char * value; };
    const char *errcode<EALREADY>::value = "EALREADY";
    template <> struct errcode<EINPROGRESS> { static const char * value; };
    const char *errcode<EINPROGRESS>::value = "EINPROGRESS";
    template <> struct errcode<ESTALE> { static const char * value; };
    const char *errcode<ESTALE>::value = "ESTALE";
    template <> struct errcode<EUCLEAN> { static const char * value; };
    const char *errcode<EUCLEAN>::value = "EUCLEAN";
    template <> struct errcode<ENOTNAM> { static const char * value; };
    const char *errcode<ENOTNAM>::value = "ENOTNAM";
    template <> struct errcode<ENAVAIL> { static const char * value; };
    const char *errcode<ENAVAIL>::value = "ENAVAIL";
    template <> struct errcode<EISNAM> { static const char * value; };
    const char *errcode<EISNAM>::value = "EISNAM";
    template <> struct errcode<EREMOTEIO> { static const char * value; };
    const char *errcode<EREMOTEIO>::value = "EREMOTEIO";
    template <> struct errcode<EDQUOT> { static const char * value; };
    const char *errcode<EDQUOT>::value = "EDQUOT";
    template <> struct errcode<ENOMEDIUM> { static const char * value; };
    const char *errcode<ENOMEDIUM>::value = "ENOMEDIUM";
    template <> struct errcode<EMEDIUMTYPE> { static const char * value; };
    const char *errcode<EMEDIUMTYPE>::value = "EMEDIUMTYPE";
    template <> struct errcode<ECANCELED> { static const char * value; };
    const char *errcode<ECANCELED>::value = "ECANCELED";
    template <> struct errcode<ENOKEY> { static const char * value; };
    const char *errcode<ENOKEY>::value = "ENOKEY";
    template <> struct errcode<EKEYEXPIRED> { static const char * value; };
    const char *errcode<EKEYEXPIRED>::value = "EKEYEXPIRED";
    template <> struct errcode<EKEYREVOKED> { static const char * value; };
    const char *errcode<EKEYREVOKED>::value = "EKEYREVOKED";
    template <> struct errcode<EKEYREJECTED> { static const char * value; };
    const char *errcode<EKEYREJECTED>::value = "EKEYREJECTED";
    template <> struct errcode<EOWNERDEAD> { static const char * value; };
    const char *errcode<EOWNERDEAD>::value = "EOWNERDEAD";
    template <> struct errcode<ENOTRECOVERABLE> { static const char * value; };
    const char *errcode<ENOTRECOVERABLE>::value = "ENOTRECOVERABLE";

    const char * errcode_str[] = {
        errcode<0>::value,
        errcode<1>::value,
        errcode<2>::value,
        errcode<3>::value,
        errcode<4>::value,
        errcode<5>::value,
        errcode<6>::value,
        errcode<7>::value,
        errcode<8>::value,
        errcode<9>::value,
        errcode<10>::value,
        errcode<11>::value,
        errcode<12>::value,
        errcode<13>::value,
        errcode<14>::value,
        errcode<15>::value,
        errcode<16>::value,
        errcode<17>::value,
        errcode<18>::value,
        errcode<19>::value,
        errcode<20>::value,
        errcode<21>::value,
        errcode<22>::value,
        errcode<23>::value,
        errcode<24>::value,
        errcode<25>::value,
        errcode<26>::value,
        errcode<27>::value,
        errcode<28>::value,
        errcode<29>::value,
        errcode<30>::value,
        errcode<31>::value,
        errcode<32>::value,
        errcode<33>::value,
        errcode<34>::value,
        errcode<35>::value,
        errcode<36>::value,
        errcode<37>::value,
        errcode<38>::value,
        errcode<39>::value,
        errcode<40>::value,
        errcode<41>::value,
        errcode<42>::value,
        errcode<43>::value,
        errcode<44>::value,
        errcode<45>::value,
        errcode<46>::value,
        errcode<47>::value,
        errcode<48>::value,
        errcode<49>::value,
        errcode<50>::value,
        errcode<51>::value,
        errcode<52>::value,
        errcode<53>::value,
        errcode<54>::value,
        errcode<55>::value,
        errcode<56>::value,
        errcode<57>::value,
        errcode<58>::value,
        errcode<59>::value,
        errcode<60>::value,
        errcode<61>::value,
        errcode<62>::value,
        errcode<63>::value,
        errcode<64>::value,
        errcode<65>::value,
        errcode<66>::value,
        errcode<67>::value,
        errcode<68>::value,
        errcode<69>::value,
        errcode<70>::value,
        errcode<71>::value,
        errcode<72>::value,
        errcode<73>::value,
        errcode<74>::value,
        errcode<75>::value,
        errcode<76>::value,
        errcode<77>::value,
        errcode<78>::value,
        errcode<79>::value,
        errcode<80>::value,
        errcode<81>::value,
        errcode<82>::value,
        errcode<83>::value,
        errcode<84>::value,
        errcode<85>::value,
        errcode<86>::value,
        errcode<87>::value,
        errcode<88>::value,
        errcode<89>::value,
        errcode<90>::value,
        errcode<91>::value,
        errcode<92>::value,
        errcode<93>::value,
        errcode<94>::value,
        errcode<95>::value,
        errcode<96>::value,
        errcode<97>::value,
        errcode<98>::value,
        errcode<99>::value,
        errcode<100>::value,
        errcode<101>::value,
        errcode<102>::value,
        errcode<103>::value,
        errcode<104>::value,
        errcode<105>::value,
        errcode<106>::value,
        errcode<107>::value,
        errcode<108>::value,
        errcode<109>::value,
        errcode<110>::value,
        errcode<111>::value,
        errcode<112>::value,
        errcode<113>::value,
        errcode<114>::value,
        errcode<115>::value,
        errcode<116>::value,
        errcode<117>::value,
        errcode<118>::value,
        errcode<119>::value,
        errcode<120>::value,
        errcode<121>::value,
        errcode<122>::value,
        errcode<123>::value,
        errcode<124>::value,
        errcode<125>::value,
        errcode<126>::value,
        errcode<127>::value,
        errcode<128>::value,
        errcode<129>::value,
        errcode<130>::value,
        errcode<131>::value,
        errcode<132>::value,
    };


} // namespace more

#endif /* _ERRCODE_H_ */
